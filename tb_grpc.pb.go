// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: tb.proto

package example_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TestBoardService_Register_FullMethodName = "/tb.TestBoardService/Register"
	TestBoardService_Connect_FullMethodName  = "/tb.TestBoardService/Connect"
)

// TestBoardServiceClient is the client API for TestBoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestBoardServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (TestBoardService_ConnectClient, error)
}

type testBoardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestBoardServiceClient(cc grpc.ClientConnInterface) TestBoardServiceClient {
	return &testBoardServiceClient{cc}
}

func (c *testBoardServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, TestBoardService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testBoardServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (TestBoardService_ConnectClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TestBoardService_ServiceDesc.Streams[0], TestBoardService_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &testBoardServiceConnectClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestBoardService_ConnectClient interface {
	Recv() (*MessageStream, error)
	grpc.ClientStream
}

type testBoardServiceConnectClient struct {
	grpc.ClientStream
}

func (x *testBoardServiceConnectClient) Recv() (*MessageStream, error) {
	m := new(MessageStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestBoardServiceServer is the server API for TestBoardService service.
// All implementations must embed UnimplementedTestBoardServiceServer
// for forward compatibility
type TestBoardServiceServer interface {
	Register(context.Context, *RegisterRequest) (*Response, error)
	Connect(*ConnectRequest, TestBoardService_ConnectServer) error
	mustEmbedUnimplementedTestBoardServiceServer()
}

// UnimplementedTestBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestBoardServiceServer struct {
}

func (UnimplementedTestBoardServiceServer) Register(context.Context, *RegisterRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTestBoardServiceServer) Connect(*ConnectRequest, TestBoardService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTestBoardServiceServer) mustEmbedUnimplementedTestBoardServiceServer() {}

// UnsafeTestBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestBoardServiceServer will
// result in compilation errors.
type UnsafeTestBoardServiceServer interface {
	mustEmbedUnimplementedTestBoardServiceServer()
}

func RegisterTestBoardServiceServer(s grpc.ServiceRegistrar, srv TestBoardServiceServer) {
	s.RegisterService(&TestBoardService_ServiceDesc, srv)
}

func _TestBoardService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestBoardServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestBoardService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestBoardServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestBoardService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestBoardServiceServer).Connect(m, &testBoardServiceConnectServer{ServerStream: stream})
}

type TestBoardService_ConnectServer interface {
	Send(*MessageStream) error
	grpc.ServerStream
}

type testBoardServiceConnectServer struct {
	grpc.ServerStream
}

func (x *testBoardServiceConnectServer) Send(m *MessageStream) error {
	return x.ServerStream.SendMsg(m)
}

// TestBoardService_ServiceDesc is the grpc.ServiceDesc for TestBoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestBoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tb.TestBoardService",
	HandlerType: (*TestBoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _TestBoardService_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TestBoardService_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tb.proto",
}
